


<!-- load the d3.js library -->
<script src="/js/d3.js"></script>

<script>
	$(document).ready(
			function() {
				$.get("/api/cluster/{{.clusterName}}", function(instances) {
					nodesList = visualizeInstances(instances);
                    generateInstanceDivs(nodesList);
				}, "json");
				
				function generateInstanceDivs(nodesList) {
					$("[data-fo-id]").each(function() {
                        var id = $(this).attr("data-fo-id");
                        $(this).html('<div xmlns="http://www.w3.org/1999/xhtml" class="popover right" style="display:block; position:inherit"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"><p></p></div></div>');
                        
                    });
					nodesList.forEach(function(node) {                    	
                    	$("[data-fo-id='"+node.id+"'] .popover h3").html(node.title);
                    	$("[data-fo-id='"+node.id+"'] .popover .popover-content p").html(node.version + " "+ node.binlogFormat + "<br/>" + node.secondsBehindMaster + " seconds lag");
                    });
                    $("[data-fo-id]").each(function() {
                    	var id = $(this).attr("data-fo-id");
                    	var popoverDiv = $("[data-fo-id='"+id+"'] div.popover");
                        popoverDiv.attr("x", $(this).attr("x"));
                        popoverDiv.attr("y", $(this).attr("y"));
                        $(this).attr("y", 0-popoverDiv.height()/2 - 2);                        
                    });
                    $("div.popover").popover();
                    $("div.popover").show();
				}

				function getInstanceId(host, port) {
					return "instance" + host.replace(/[.]/g, "_") + "__" + port
				}

				function visualizeInstances(instances) {

					var treeData = [];
					var nodesList = [];

					instances.forEach(function(instance) {
						nodesList.push({
							id : getInstanceId(instance.Key.Hostname,
									instance.Key.Port),
							hasMaster : true,
							parent : getInstanceId(instance.MasterKey.Hostname,
									instance.MasterKey.Port),
							hostname : instance.Key.Hostname,
							port : instance.Key.Port,
							name : getInstanceId(instance.Key.Hostname,
									instance.Key.Port),
							title : instance.Key.Hostname + ":"
									+ instance.Key.Port,
							version : instance.Version,
							binlogFormat : instance.Binlog_format,
							secondsBehindMaster : instance.SecondsBehindMaster,
							children : null
						});

					});
					var dataMap = nodesList.reduce(function(map, node) {
						map[node.id] = node;
						return map;
					}, {});

					// create the tree array

					nodesList.forEach(function(node) {
						// add to parent
						var parent = dataMap[node.parent];
						if (parent) {
							// create child array if it doesn't exist
							(parent.children || (parent.children = []))
							// add node to child array
							.push(node);
							(parent.contents || (parent.contents = []))
							// add node to child array
							.push(node);
						} else {
							// parent is null or missing
							node.hasMaster = false;
							node.parent = null;
							treeData.push(node);
						}
					});

					//console.log(treeData);
					//~~~ 1111

					var margin = {
						top : 20,
						right : 60,
						bottom : 20,
						left : 60
					}, width = 1560 - margin.right - margin.left, height = 800
							- margin.top - margin.bottom;

					var i = 0, duration = 750, root;

					var tree = d3.layout.tree().size([ height, width ]);

					var diagonal = d3.svg.diagonal().projection(function(d) {
						return [ d.y, d.x ];
					});

					var svg = d3.select("body").append("svg").attr("width",
							width + margin.right + margin.left).attr("height",
							height + margin.top + margin.bottom).attr("xmlns", "http://www.w3.org/2000/svg").attr("version", "1.1").append("g")
							.attr(
									"transform",
									"translate(" + margin.left + ","
											+ margin.top + ")");

					var root = treeData[0];

					root.x0 = height / 2;
					root.y0 = 0;

					function collapse(d) {
						if (d.children) {
							d._children = d.children;
							d._children.forEach(collapse);
							d.children = null;
						}
					}

					//root.children.forEach(collapse);
					update(root);

					d3.select(self.frameElement).style("height", "800px");

					function update(source) {

						// Compute the new tree layout.
						var nodes = tree.nodes(root).reverse(), links = tree
								.links(nodes);

						// Normalize for fixed-depth.
						nodes.forEach(function(d) {
							d.y = d.depth * 400;
						});

						// Update the nodes…
						var node = svg.selectAll("g.node").data(nodes,
								function(d) {
									return d.id || (d.id = ++i);
								});

						// Enter any new nodes at the parent's previous position.
						var nodeEnter = node.enter().append("g").attr("class",
								"node").attr(
								"transform",
								function(d) {
									return "translate(" + source.y0 + ","
											+ source.x0 + ")";
								}).on("click", click);

						nodeEnter.append("circle").attr("r", 1e-6).style(
								"fill",
								function(d) {
									return d._children ? "lightsteelblue"
											: "#fff";
								});
						/*
                        nodeEnter.append("text").attr("x", function(d) {
                            return d.children || d._children ? -10 : 10;
                        }).attr("dy", ".35em").attr("text-anchor", function(d) {
                            return d.children || d._children ? "end" : "start";
                        }).attr(
                            "class", "node_title"
                        ).attr("title", function(d) {
                            return d.title;
                        }).text(function(d) {
                            return d.title;
                        }).style("fill-opacity", 1e-6);
                        */
                        nodeEnter.append("foreignObject").attr("data-fo-id", function(d) {
                            return d.id
                        }).attr("width", "100%").attr("height", "100%").attr("dy", ".35em").attr("text-anchor", function(d) {
                            return d.children || d._children ? "end" : "start";
                        }).attr("x", function(d) {
                            return 8;
                        }).attr("requiredFeatures", "http://www.w3.org/TR/SVG11/feature#Extensibility");
                        
						// Transition nodes to their new position.
						var nodeUpdate = node.transition().duration(duration)
								.attr(
										"transform",
										function(d) {
											return "translate(" + d.y + ","
													+ d.x + ")";
										});

						nodeUpdate.select("circle").attr("r", 4.5).style(
								"fill",
								function(d) {
									return d._children ? "lightsteelblue"
											: "#fff";
								});

						nodeUpdate.select("text").style("fill-opacity", 1);
						
						// Transition exiting nodes to the parent's new position.
						var nodeExit = node.exit().transition().duration(
								duration).attr(
								"transform",
								function(d) {
									return "translate(" + source.y + ","
											+ source.x + ")";
								}).remove();

						nodeExit.select("circle").attr("r", 1e-6);

						nodeExit.select("text").style("fill-opacity", 1e-6);
						//nodeExit.select("foreignObject").style("fill-opacity", 1e-6);

						// Update the links…
						var link = svg.selectAll("path.link").data(links,
								function(d) {
									return d.target.id;
								});

						// Enter any new links at the parent's previous position.
						link.enter().insert("path", "g").attr("class", "link")
								.attr("d", function(d) {
									var o = {
										x : source.x0,
										y : source.y0
									};
									return diagonal({
										source : o,
										target : o
									});
								});

						// Transition links to their new position.
						link.transition().duration(duration)
								.attr("d", diagonal);

						// Transition exiting nodes to the parent's new position.
						link.exit().transition().duration(duration).attr("d",
								function(d) {
									var o = {
										x : source.x,
										y : source.y
									};
									return diagonal({
										source : o,
										target : o
									});
								}).remove();

						// Stash the old positions for transition.
						nodes.forEach(function(d) {
							d.x0 = d.x;
							d.y0 = d.y;
						});
					}

					// Toggle children on click.
					function click(d) {
						if (d.children) {
							d._children = d.children;
							d.children = null;
						} else {
							d.children = d._children;
							d._children = null;
						}
						update(d);
						generateInstanceDivs(nodesList);
					}

					//~~~ 2222
					return nodesList;
				}
			});
</script>
