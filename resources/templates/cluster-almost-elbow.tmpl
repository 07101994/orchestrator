
<style>


text {
  font-family: "Helvetica Neue", Helvetica, sans-serif;
}

.name {
  font-weight: bold;
}

.about {
  fill: #777;
  font-size: smaller;
}

.link {
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}

</style>

<!-- load the d3.js library -->
<script src="/js/d3.js"></script>

<script>
i3={
		  "name": "Clifford Shanks",
		  "born": 1862,
		  "died": 1906,
		  "location": "Petersburg, VA",
		  "parents": [
		    {
		      "name": "James Shanks",
		      "born": 1831,
		      "died": 1884,
		      "location": "Petersburg, VA",
		      "parents": [
		        {
		          "name": "Robert Shanks",
		          "born": 1781,
		          "died": 1871,
		          "location": "Ireland/Petersburg, VA"
		        },
		        {
		          "name": "Elizabeth Shanks",
		          "born": 1795,
		          "died": 1871,
		          "location": "Ireland/Petersburg, VA"
		        }
		      ]
		    },
		    {
		      "name": "Ann Emily Brown",
		      "born": 1826,
		      "died": 1866,
		      "location": "Brunswick/Petersburg, VA",
		      "parents": [
		        {
		          "name": "Henry Brown",
		          "born": 1792,
		          "died": 1845,
		          "location": "Montgomery, NC"
		        },
		        {
		          "name": "Sarah Houchins",
		          "born": 1793,
		          "died": 1882,
		          "location": "Montgomery, NC"
		        }
		      ]
		    }
		  ]
		};
		console.log(i3);
treeData = [];
    $(document).ready(function() {
        $.get("/api/cluster/{{.clusterName}}", function(instances) {
            visualizeInstances(instances);
        }, "json" );
        
        function getInstanceId(host, port) {
            return "instance" + host.replace(/[.]/g, "_") + "__" + port
        }
        
        function visualizeInstances(instances) {
        	
            //var treeData = [];
            {
            var nodes = [];
            var d3links = [];
            
            instances.forEach(function(instance) {
            	nodes.push({
            		id: getInstanceId(instance.Key.Hostname, instance.Key.Port),
            		hasMaster: true,
            		parent: getInstanceId(instance.MasterKey.Hostname, instance.MasterKey.Port),
            		hostname: instance.Key.Hostname,
            		port: instance.Key.Port,
                    name: getInstanceId(instance.Key.Hostname, instance.Key.Port),
                    title: instance.Key.Hostname+":"+instance.Key.Port,
                    version: instance.Version,
                    born:1919,
                    died:1920,
                    location:"kansas",
                    children: null,
                    x:100,
                    y:100,
                    size:400
            	});
           		d3links.push({
           			source: getInstanceId(instance.MasterKey.Hostname, instance.MasterKey.Port), 
           			target: getInstanceId(instance.Key.Hostname, instance.Key.Port)
           		});            		
            });
           	var dataMap = nodes.reduce(function(map, node) {
           	    map[node.id] = node;
           	    return map;
           	}, {});

           	// create the tree array
           	
           	nodes.forEach(function(node) {
           	    // add to parent
           	    var parent = dataMap[node.parent];
           	    if (parent) {
           	        // create child array if it doesn't exist
                    (parent.children || (parent.children = []))
                    // add node to child array
                        .push(node);
                    (parent.contents || (parent.contents = []))
                    // add node to child array
                        .push(node);
           	    } else {
           	        // parent is null or missing
           	        node.hasMaster = false;
           	        node.parent = null;
           	        treeData.push(node);
           	    }
           	});
            }
            //console.log(treeData);
//~~~ 1111

var margin = {top: 0, right: 320, bottom: 0, left: 0},
    width = 960 - margin.left - margin.right,
    height = 500 - margin.top - margin.bottom;

var tree = d3.layout.tree()
    .separation(function(a, b) { return a.parent === b.parent ? 1 : .5; })
    .children(function(d) { console.log(d);return d.children; })
    .size([height, width]);

var svg = d3.select("body").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

var nodes = tree.nodes(treeData);;

var link = svg.selectAll(".link")
    .data(tree.links(nodes))
  .enter().append("path")
    .attr("class", "link")
    .attr("d", elbow);

var node = svg.selectAll(".node")
    .data(nodes)
  .enter().append("g")
    .attr("class", "node")
    .attr("transform", function(d) { d=d[0];return "translate(" + d.y + "," + d.x + ")"; })

node.append("text")
    .attr("class", "name")
    .attr("x", 8)
    .attr("y", -6)
    .text(function(d) { d=d[0];return d.name; });

node.append("text")
    .attr("x", 8)
    .attr("y", 8)
    .attr("dy", ".71em")
    .attr("class", "about lifespan")
    .text(function(d) { d=d[0];return d.born + "â€“" + d.died; });

node.append("text")
    .attr("x", 8)
    .attr("y", 8)
    .attr("dy", "1.86em")
    .attr("class", "about location")
    .text(function(d) { d=d[0];return d.location; });

function elbow(d, i) {
return "M" + d.source.y + "," + d.source.x
     + "H" + d.target.y + "V" + d.target.x
     + (d.target.children ? "" : "h" + margin.right);
}

     
//~~~ 2222
        }
    });            
</script>